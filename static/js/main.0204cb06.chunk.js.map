{"version":3,"sources":["components/movieItem/movieItem.js","components/originalImage/originalImage.js","containers/movieList/functions.js","containers/movieList/movieList.js","api/request.js","App.js","serviceWorker.js","index.js","assets/img/tv-png.png"],"names":["MovieItem","_this","this","logoTV","props","_this$props$data","data","season","number","_this$props$data$show","show","name","premiered","image","react_default","a","createElement","className","onClick","toggleBigImage","original","src","medium","alt","substr","Component","OriginalImage","_this$props","originalImgLink","originalImgName","style","display","serialEnding","moviesData","str","String","length","lastN","Number","MovieList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleList","setState","list","state","console","log","bigImage","toggleArrow","quantitySerials","_this2","date","toLocaleString","day","month","getFullYear","slice","map","movie","key","id","movieItem","lib_default","size","borderSize","singleColor","originalImage","getEpizodesList","epizodesList","fetch","getMonth","getDate","then","response","json","catch","error","promiseEpizodesList","epizodes","forEach","epizode","push","App","setEpizodesList","onChangeDate","Date","movieList","Fragment","entry_default","onChange","value","onClickDay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.0204cb06.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './styles.css';\r\n\r\nclass MovieItem extends Component{\r\n  render() {\r\n    const { logoTV } = this.props;  \r\n    const {\r\n          season, number,\r\n          show: { name, premiered, image },\r\n          } = this.props.data;\r\n    return(\r\n      <div className=\"card\">\r\n        <div className=\"card-img\">\r\n          <img className=\"card-img-top\" onClick={()=> {this.props.toggleBigImage( ((image !== null) ? image.original : logoTV), name )}} src={(image !== null) ? image.medium : logoTV } alt={name} />\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <div className=\"main--card-title\">\r\n            <h4 className=\"card-title\">{name}</h4>\r\n          </div>\r\n          <p className=\"card-premiered\">{premiered.substr(0,4)}</p>\r\n          <div className=\"card-info\">\r\n            <div className=\"card--info-season\">Сезон: {season}</div>\r\n            <div className=\"card--info-epizode\">Эпизод: {number}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MovieItem;","import React, { Component } from 'react';\r\nimport './styles.css';\r\nimport logoTV from \"../../assets/img/tv-png.png\";\r\n\r\nclass OriginalImage extends Component {\r\n  render() {\r\n    const { show, originalImgLink, originalImgName } = this.props;\r\n    return(\r\n      <div className=\"big-image\" style={{ display: show }} onClick={()=> {this.props.toggleBigImage(originalImgLink)}} >\r\n        <div className=\"bground\"></div>\r\n        <img className=\"card-img-big\" src={ originalImgLink ?  originalImgLink : logoTV } alt={originalImgName} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default OriginalImage;","/*\r\n  проверяет и возвращает соответствующее окончание слова\r\n  или пустую строку в зависимости от количества сериалов для подгрузки,\r\n  а соответственно в зависимости от последней цифры:\r\n    1 -> 'л';\r\n    2-4 -> 'ла'; \r\n    5-9, 0 и диапозон от 10-20 -> 'ов';\r\n*/\r\n\r\nconst serialEnding = (moviesData) => {\r\n  /* преобразовываю в строку moviesData.length и обратно в число последний символ str */\r\n  let str = String(moviesData.length-3);\r\n  let lastN = Number(str[str.length-1]);\r\n\r\n  return ( \r\n    ( ( \r\n        ( \r\n          ( (moviesData.length-3) >= 5 ) \r\n          && \r\n          ( (moviesData.length-3) < 20 ) \r\n        ) \r\n        ||\r\n        ( (moviesData.length-3) > 20 ) \r\n      )\r\n      &&\r\n      ( \r\n        (lastN === 5) || (lastN === 6) || (lastN === 7) || (lastN === 8) || (lastN === 9) || (lastN === 0) \r\n      ) )\r\n    ? 'ов'\r\n    \r\n    : ( ( \r\n          ( \r\n            ( 3 <= (moviesData.length-3) ) \r\n            && \r\n            ( (moviesData.length-3) < 5 ) \r\n          ) \r\n          || \r\n          ( (moviesData.length-3) > 20 ) \r\n        )\r\n        &&\r\n        ( (lastN === 2) || (lastN === 3) || (lastN === 4) ) \r\n      )\r\n    ? 'а'\r\n    : ( ( \r\n          ( \r\n            ( 0 < (moviesData.length-3) )\r\n            &&\r\n            ( (moviesData.length-3) < 5 )\r\n          )\r\n          ||\r\n          ( (moviesData.length-3) > 20 ) \r\n        )\r\n        &&\r\n        ( lastN === 1) \r\n      )  \r\n    ? ''\r\n    : 'ов'\r\n  )\r\n}\r\n\r\nexport default serialEnding;","import React, { Component } from 'react';\r\nimport MovieItem from '../../components/movieItem/movieItem.js';\r\nimport MDSpinner from \"react-md-spinner\";\r\nimport OriginalImage from '../../components/originalImage/originalImage.js';\r\nimport serialEnding from './functions.js';\r\nimport './styles.css';\r\n\r\nclass MovieList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      list: 'short',\r\n      bigImage: 'none',\r\n      originalImgLink: '',\r\n      originalImgName: '',\r\n    }\r\n  }\r\n\r\n  toggleList = () => {\r\n    this.setState({\r\n      list: (this.state.list === 'short') ? 'long' : 'short',\r\n    })\r\n  }\r\n\r\n  toggleBigImage = (originalImgLink, originalImgName) => {\r\n    console.log('1');\r\n    this.setState({ \r\n      bigImage: (this.state.bigImage === 'none') ? 'flex' : 'none',\r\n      originalImgLink: originalImgLink,\r\n      originalImgName: originalImgName,\r\n     })\r\n  }\r\n\r\n  toggleArrow = () => {\r\n    return (this.state.list === 'short') \r\n      ? <div className=\"bt-arrow\">&gt;</div>\r\n      : <div className=\"bt-arrow\">&lt;</div>\r\n  }\r\n\r\n  quantitySerials = () => {\r\n    return ( (this.props.moviesData.length-3) < 0 ) ? 0 : (this.props.moviesData.length-3)\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    const { date, moviesData, logoTV } = this.props;\r\n    return (\r\n      <div className=\"movieList\">\r\n        <div className=\"movieList-date\">\r\n          {date.toLocaleString(\"ru\", { day: 'numeric', month: 'long' })} {date.getFullYear()}\r\n        </div>\r\n        { ( moviesData && (this.state.list === 'short') )\r\n          ? (moviesData.slice(0, 3)).map((movie)=> (\r\n              <div key={movie.id} id={movie.id}>\r\n                <MovieItem\r\n                  data={movie}\r\n                  logoTV={logoTV}\r\n                  toggleBigImage={this.toggleBigImage}\r\n                  show={this.state.bigImage}\r\n                  originalImgLink={this.state.originalImgLink}\r\n                />\r\n              </div>\r\n            ))\r\n          :  ( moviesData && (this.state.list === 'long') )\r\n          ? moviesData.map((movie)=> (\r\n              <div key={movie.id} id={movie.id}>\r\n                <MovieItem\r\n                  data={movie}\r\n                  logoTV={logoTV}\r\n                  toggleBigImage={this.toggleBigImage}\r\n                  show={this.state.bigImage}\r\n                />\r\n              </div>\r\n            ))\r\n          : (\r\n            <div>\r\n              <MDSpinner size={70} borderSize={3} singleColor=\"rgb(216, 83, 83)\" />\r\n            </div>\r\n          )\r\n        }\r\n        <div className=\"block-bt\">\r\n          <button className=\"bt-longList\" \r\n                  onClick={ this.toggleList }\r\n          >\r\n            Ещё { this.quantitySerials() } сериал{serialEnding(moviesData)} {this.toggleArrow()}\r\n          </button>\r\n        </div>\r\n        <OriginalImage \r\n          originalImgLink={this.state.originalImgLink}\r\n          toggleBigImage={this.toggleBigImage}\r\n          show={this.state.bigImage}\r\n          originalImgName={this.state.originalImgName}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieList;","const promiseEpizodesList = (date) => {\r\n    return fetch(\"http://api.tvmaze.com/schedule?country=US&date=\" + date.getFullYear() + '-' + ((date.getMonth()+1) < 10 ? '0' + (date.getMonth()+1) : (date.getMonth()+1) ) + '-' + ((date.getDate()) < 10 ? '0' + (date.getDate()) : (date.getDate()) ))\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"ERROR:\" + error);\r\n            });\r\n  }\r\n  \r\nconst getEpizodesList = (date) => {\r\n    const epizodesList = [];\r\n    return promiseEpizodesList(date)\r\n            .then(epizodes => {\r\n              epizodes.forEach(epizode => {\r\n                epizodesList.push(epizode)\r\n              })\r\n              return epizodesList\r\n            })\r\n            .catch((error) => {\r\n              console.log(\"ERROR:\" + error);\r\n            });\r\n  }\r\n\r\nexport default getEpizodesList;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport logoTV from \"./assets/img/tv-png.png\";\r\nimport Calendar from 'react-calendar';\r\nimport MovieList from './containers/movieList/movieList.js';\r\nimport MDSpinner from \"react-md-spinner\";\r\nimport getEpizodesList from './api/request.js';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        date: new Date(),\r\n        epizodesList: [],\r\n    }\r\n  }\r\n\r\n  setEpizodesList = (date) => {\r\n    getEpizodesList(date)\r\n      .then(data => {\r\n        console.log(data);\r\n        this.setState({\r\n          epizodesList: data,\r\n        })\r\n      })                \r\n  } \r\n\r\n  onChangeDate = date => {this.setState({ date: date})}\r\n\r\n  render() {\r\n    return ( \r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1>SUPER FILM</h1>\r\n        </header>\r\n        <main className=\"App-main\">\r\n          { (this.state.epizodesList.length)\r\n            ? (\r\n              <div className=\"dayMovieList\">\r\n                <button\r\n                  className=\"bt-back\"\r\n                  onClick={ () => { this.setState({ epizodesList: [] }) } }\r\n                >&lt;\r\n                </button>\r\n                <MovieList\r\n                  moviesData={this.state.epizodesList}\r\n                  logoTV={logoTV}\r\n                  date={this.state.date}\r\n                />\r\n              </div>\r\n            )\r\n            : (!this.state.epizodesList.length)\r\n            ? (\r\n              <React.Fragment>\r\n                <div className=\"content\">\r\n                  <img src={logoTV} alt=\"tv\" />\r\n                  <span>Для получения списка сериалов,<br/> \r\n                  пожалуйста, выберите <br/>\r\n                  необходимый месяц и день</span>\r\n                </div>\r\n                <div className=\"calendar\">\r\n                  <Calendar           \r\n                    onChange={this.onChangeDate} \r\n                    value={this.state.date}\r\n                    onClickDay={() => {this.setEpizodesList(this.state.date)}}\r\n                  />\r\n                </div>\r\n              </React.Fragment>\r\n            )\r\n            : (\r\n              <div>\r\n                <MDSpinner size={70} borderSize={3} singleColor=\"rgb(216, 83, 83)\" />\r\n              </div>\r\n            )\r\n          }\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/tv-png.332c960b.png\";"],"sourceRoot":""}